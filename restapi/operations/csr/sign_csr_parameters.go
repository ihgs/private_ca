package csr

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSignCsrParams creates a new SignCsrParams object
// with the default values initialized.
func NewSignCsrParams() SignCsrParams {
	var ()
	return SignCsrParams{}
}

// SignCsrParams contains all the bound params for the sign csr operation
// typically these are obtained from a http.Request
//
// swagger:parameters signCsr
type SignCsrParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*csr
	  Required: true
	  In: formData
	*/
	Csr runtime.File
	/*CA pem password
	  In: query
	*/
	PemPassword *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *SignCsrParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return err
		} else if err := r.ParseForm(); err != nil {
			return err
		}
	}

	csr, csrHeader, err := r.FormFile("csr")
	if err != nil {
		res = append(res, errors.New(400, "reading file %q failed: %v", "csr", err))
	} else {
		o.Csr = runtime.File{Data: csr, Header: csrHeader}
	}

	qPemPassword, qhkPemPassword, _ := qs.GetOK("pem_password")
	if err := o.bindPemPassword(qPemPassword, qhkPemPassword, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SignCsrParams) bindPemPassword(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.PemPassword = &raw

	return nil
}
