package csr

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// SignCsrHandlerFunc turns a function with the right signature into a sign csr handler
type SignCsrHandlerFunc func(SignCsrParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SignCsrHandlerFunc) Handle(params SignCsrParams) middleware.Responder {
	return fn(params)
}

// SignCsrHandler interface for that can handle valid sign csr params
type SignCsrHandler interface {
	Handle(SignCsrParams) middleware.Responder
}

// NewSignCsr creates a new http.Handler for the sign csr operation
func NewSignCsr(ctx *middleware.Context, handler SignCsrHandler) *SignCsr {
	return &SignCsr{Context: ctx, Handler: handler}
}

/*SignCsr swagger:route POST /csr csr signCsr

Certificate Signing Request


*/
type SignCsr struct {
	Context *middleware.Context
	Handler SignCsrHandler
}

func (o *SignCsr) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewSignCsrParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
