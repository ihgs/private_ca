package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateCAHandlerFunc turns a function with the right signature into a create c a handler
type CreateCAHandlerFunc func(CreateCAParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateCAHandlerFunc) Handle(params CreateCAParams) middleware.Responder {
	return fn(params)
}

// CreateCAHandler interface for that can handle valid create c a params
type CreateCAHandler interface {
	Handle(CreateCAParams) middleware.Responder
}

// NewCreateCA creates a new http.Handler for the create c a operation
func NewCreateCA(ctx *middleware.Context, handler CreateCAHandler) *CreateCA {
	return &CreateCA{Context: ctx, Handler: handler}
}

/*CreateCA swagger:route POST /ca createCA

Create CA


*/
type CreateCA struct {
	Context *middleware.Context
	Handler CreateCAHandler
}

func (o *CreateCA) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewCreateCAParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
