package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Subject subject
// swagger:model subject
type Subject struct {

	// A challenge password
	// Max Length: 20
	// Min Length: 4
	ChallengePassword string `json:"challenge_password,omitempty"`

	// Common Name (eg, your name or your server\'s hostname)
	// Required: true
	// Max Length: 64
	CommonName *string `json:"common_name"`

	// Country Name (2 letter code)
	// Required: true
	CountryName *string `json:"country_name"`

	// Email Address
	// Required: true
	// Max Length: 64
	Email *string `json:"email"`

	// Locality Name (eg, city)
	// Required: true
	LocalityName *string `json:"locality_name"`

	// An optional company name
	OptionalCompanyName string `json:"optional_company_name,omitempty"`

	// Organization Name (eg, company)
	// Required: true
	OrgName *string `json:"org_name"`

	// Organizational Unit Name (eg, section)
	// Required: true
	OrgUnit *string `json:"org_unit"`

	// State or Province Name (full name)
	// Required: true
	StateOfProvince *string `json:"state_of_province"`
}

// Validate validates this subject
func (m *Subject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChallengePassword(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCommonName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCountryName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLocalityName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrgName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrgUnit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStateOfProvince(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subject) validateChallengePassword(formats strfmt.Registry) error {

	if swag.IsZero(m.ChallengePassword) { // not required
		return nil
	}

	if err := validate.MinLength("challenge_password", "body", string(m.ChallengePassword), 4); err != nil {
		return err
	}

	if err := validate.MaxLength("challenge_password", "body", string(m.ChallengePassword), 20); err != nil {
		return err
	}

	return nil
}

func (m *Subject) validateCommonName(formats strfmt.Registry) error {

	if err := validate.Required("common_name", "body", m.CommonName); err != nil {
		return err
	}

	if err := validate.MaxLength("common_name", "body", string(*m.CommonName), 64); err != nil {
		return err
	}

	return nil
}

func (m *Subject) validateCountryName(formats strfmt.Registry) error {

	if err := validate.Required("country_name", "body", m.CountryName); err != nil {
		return err
	}

	return nil
}

func (m *Subject) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.MaxLength("email", "body", string(*m.Email), 64); err != nil {
		return err
	}

	return nil
}

func (m *Subject) validateLocalityName(formats strfmt.Registry) error {

	if err := validate.Required("locality_name", "body", m.LocalityName); err != nil {
		return err
	}

	return nil
}

func (m *Subject) validateOrgName(formats strfmt.Registry) error {

	if err := validate.Required("org_name", "body", m.OrgName); err != nil {
		return err
	}

	return nil
}

func (m *Subject) validateOrgUnit(formats strfmt.Registry) error {

	if err := validate.Required("org_unit", "body", m.OrgUnit); err != nil {
		return err
	}

	return nil
}

func (m *Subject) validateStateOfProvince(formats strfmt.Registry) error {

	if err := validate.Required("state_of_province", "body", m.StateOfProvince); err != nil {
		return err
	}

	return nil
}
